package pharoslabut.logger.analyzer;

import pharoslabut.RobotIPAssignments;
import pharoslabut.exceptions.PharosException;

/**
 * Contains all of the information collected when a TelosB 802.15.4 wireless
 * broadcast is received.  
 * 
 * @author  Chien-Liang Fok
 */
public class TelosBRxRecord implements Comparable<TelosBRxRecord>{
	long timestamp;
	int sndrID;
	int rcvrID;
	int seqno;
	int rssi;
	int lqi;
	int moteTimestamp;
	
	/**
	 * This constructor is used when reading raw data generated during experiments.
	 * The RSSI values is raw in the sense that is is encoded as an 8-bit two's complement value
	 * that has not been shifted to make it in dBm units.
	 * 
	 * @param timestamp
	 * @param rcvrID
	 * @param sndrID
	 * @param seqno
	 * @param rssi The "raw" rssi value as reported by the TelosB mote.
	 * @param lqi
	 * @param moteTimestamp
	 */
	public TelosBRxRecord (long timestamp, int rcvrID, int sndrID, int seqno, 
			int rssi, int lqi, int moteTimestamp) 
	{
		this.timestamp = timestamp;
		this.sndrID = sndrID;
		this.rcvrID = rcvrID;
		this.seqno = seqno;
		
		// The incoming rssi as recorded by the log files is an 8-bit two's-complement integer.
		// Thus, convert this into a standard Java integer.
		// See: CC2420 datasheet: http://pharos.ece.utexas.edu/wiki/images/6/65/Cc2420-datasheet.pdf
		if ((rssi & 0x80) > 0) {
			// negative value, flip all the bits then add one
			int bitFlipped = rssi ^ 0xff;
			int addOne = bitFlipped + 1;
			this.rssi = -1 * addOne;
			
			// Debug output
//			System.out.println("TelosBRxRecord: raw RSSI = 0x" + Integer.toHexString(rssi) + "(" + rssi + ")"
//					+ ", bitFlipped = 0x" + Integer.toHexString(bitFlipped) + "(" + bitFlipped + ")"
//					+ ", addOne = 0x" + Integer.toHexString(addOne) + "(" + addOne + ")"
//					+ ", rssi = 0x" + Integer.toHexString(this.rssi) + "(" + this.rssi + ")");
		} else {
			// positive value, just leave as is
			this.rssi = rssi;
//			System.out.println("TelosBRxRecord: RSSI = 0x" + Integer.toHexString(rssi));
		}
		
		this.rssi = this.rssi - 45; // convert to dBm units.
//		System.out.println("TelosBRxRecord: RSSI = " + this.rssi + "dBm");
		this.lqi = lqi;
		this.moteTimestamp = moteTimestamp;
	}
	
	/**
	 * This constructor is used when reading data generated by 
	 * pharoslabut.logger.analyzer.SignalStrengthVsDist.  The RSSI value is
	 * already in dBm units.
	 * 
	 * @param timestamp
	 * @param rcvrID
	 * @param sndrID
	 * @param seqno
	 * @param rssi The RSSI in dBm units.
	 * @param lqi
	 */
	public TelosBRxRecord (long timestamp, int rcvrID, int sndrID, int seqno, 
			int rssi, int lqi) {
		this.timestamp = timestamp;
		this.sndrID = sndrID;
		this.rcvrID = rcvrID;
		this.seqno = seqno;
		this.rssi = rssi;
		this.lqi = lqi;
	}
	
	
	
//	public boolean hasValidRSSI() {
//		if (rssi >= 0)
//			return false;
//		else
//			return true;
//	}
	
	/**
	 * Recalibrates the time based on the GPS timestamps.
	 * 
	 * @param calibrator The time calibrator.
	 */
	public void calibrateTime(TimeCalibrator calibrator) {
		timestamp = calibrator.getCalibratedTime(timestamp);
	}
	
	public long getTimeStamp() {
		return timestamp;
	}
	
	public int getSenderID() {
		return sndrID;
	}
	
	public int getReceiverID() {
		return rcvrID;
	}
	
	public int getSeqNo() {
		return seqno;
	}
	
	public int getLQI() {
		return lqi;
	}
	
	public int getRSSI() {
		return rssi;
	}
	
	public int getMoteTimestamp() {
		return moteTimestamp;
	}
	
	public String toString() {
		
		String sndrName = null;
		try {
			sndrName = RobotIPAssignments.getName(sndrID);
		} catch (PharosException e1) {
			logErr("Unable to get sender's name: " + sndrID);
			e1.printStackTrace();
		}
		
		String rcvrName = null;
		try {
			rcvrName = RobotIPAssignments.getName(rcvrID);
		} catch (PharosException e1) {
			logErr("Unable to get receiver's name: " + rcvrID);
			e1.printStackTrace();
		}
		
		return timestamp + "\t" 
			+ sndrID + " (" + sndrName + ")\t" 
			+ rcvrID + " (" + rcvrName + ")\t" 
			+ seqno + "\t" + rssi + "\t" + lqi + "\t" + moteTimestamp;
	}

	@Override
	public int compareTo(TelosBRxRecord arg0) {
		if (getTimeStamp() == arg0.getTimeStamp())
			return 0;
		else if (getTimeStamp() > arg0.getTimeStamp())
			return 1;
		else
			return -1;
	}
	
	private void logErr(String msg) {
		String result = "TelosBRxRecord: ERROR: " + msg;
		System.err.println(result);
//		if (flogger != null)
//			flogger.log(result);
	}
}
