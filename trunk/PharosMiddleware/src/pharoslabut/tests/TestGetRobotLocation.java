package pharoslabut.tests;

import java.util.Enumeration;

import pharoslabut.logger.FileLogger;
import pharoslabut.logger.analyzer.GPSLocationState;
import pharoslabut.logger.analyzer.RobotExpData;
import pharoslabut.navigate.Location;

/**
 * Tests the ability to get a robot's location at any arbitrary time during an experiment.
 * If a direct measurement of location is not available, the location is interpolated based
 * on the nearest actual location measurements.
 * 
 * @author Chien-Liang Fok
 *
 */
public class TestGetRobotLocation {

	private static void usage() {
		System.err.println("Usage: pharoslabut.tests.TestGetRobotLocation <options>\n");
		System.err.println("Where <options> include:");
		System.err.println("\t-logFile <robot exp log file>: The log file generated by the robot during an experiment. (required)");
		System.err.println("\t-outputFile <output file>: The file to save the results in.  This will be submitted to GPSVisualizer. (required)");
		System.err.println("\t-d: Enable debug mode (default false)");
	}
	
	private static void print(String msg) {
		System.out.println("TestGetRobotLocation: " + msg);
	}
	
	public static void main(String[] args) {
		String logFileName = null;
		String outputFileName = null;
		
		try {
			for (int i=0; i < args.length; i++) {
				if (args[i].equals("-logFile") || args[i].equals("-l")) {
					logFileName = args[++i];
				} 
				else if (args[i].equals("-outputFile") || args[i].equals("-o")) {
					outputFileName = args[++i];
				}
				else if (args[i].equals("-debug") || args[i].equals("-d")) {
					System.setProperty ("PharosMiddleware.debug", "true");
				} else if (args[i].equals("-help") || args[i].equals("-h")) {
					usage();
					System.exit(0);
				} else {
					System.err.println("Unknown option: " + args[i]);
					usage();
					System.exit(1);
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
		
		RobotExpData red = new RobotExpData(logFileName);
		
		// Check whether timestamps were correctly calibrated.
		int numErrors = 0;
		Enumeration<GPSLocationState> locs = red.getGPSHistory().elements();
		while (locs.hasMoreElements()) {
			GPSLocationState currLoc = locs.nextElement();
			
			long logTimestamp = currLoc.getTimestamp();
			long gpsTimestamp = (currLoc.getLoc().getTime_sec() * 1000L);
			long timeDiff =  logTimestamp - gpsTimestamp;
			if (Math.abs(timeDiff) > 1000) { 
				print((++numErrors) + "/" + red.getGPSHistory().size() + " ERROR: Bad time calibration in " + red.getFileName() 
						+ " (logTimestamp = " + logTimestamp + ", gpsTimestamp = " + gpsTimestamp 
						+ ", timeDiff = " + timeDiff + "): " + currLoc);
			}
		}
		
		if (numErrors == 0) {
			print("GPS timestamp calibration OK!");
		}
		
		print("Robot start time = " + red.getStartTime() + ", stop time = " + red.getStopTime() 
				+ ", duration (ms) = " + (red.getStopTime() - red.getStartTime()));
		
		// Check whether the getLocation method is OK
		print("Evaluating RobotExpData.getLocation(long timestamp)...");
		print("\tExperiment start time: " + red.getStartTime());
		FileLogger flogger = new FileLogger(outputFileName, false);

		flogger.log("type,latitude,longitude,name,color");
		long currTime = red.getStartTime();
		boolean firstLoc = true;
		while (currTime < red.getStopTime()) {
			Location currLoc = red.getLocation(currTime);
			String line = "T," + currLoc.latitude() + "," + currLoc.longitude();
			if (firstLoc) {
				line += ",interpolated locations,blue";
				firstLoc = false;
			}
			flogger.log(line);
			currTime += 1000;
		}

		// Include the actual GPS measurements as way points
		flogger.log("type,latitude,longitude");
		locs = red.getGPSHistory().elements();
		while (locs.hasMoreElements()) {
			GPSLocationState currLoc = locs.nextElement();
			flogger.log("W," + currLoc.getLocation().latitude() + "," + currLoc.getLocation().longitude());
		}

		print("\tEvaluation script saved to " + outputFileName + ", upload it to GPSVisualizer to visualize...");
	}
}
