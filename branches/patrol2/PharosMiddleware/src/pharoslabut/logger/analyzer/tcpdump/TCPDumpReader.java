package pharoslabut.logger.analyzer.tcpdump;

import java.io.*;
import java.util.*;
import pharoslabut.logger.*;

/**
 * Reads in a log file generated by TCPDump and organizes it into TCPDumpRecord objects.
 * Note that the log must have been converted to plain text format.
 * 
 * @author Chien-Liang Fok
 */
public class TCPDumpReader {
	/**
	 * The name of the TCPDump log file.
	 */
	private String fileName;
	
	private Vector<TCPDumpRecord> tcpDumpData = new Vector<TCPDumpRecord>();
	
	private FileLogger flogger;
	
	/**
	 * The constructor.
	 * 
	 * @param fileName The name of the tcpdump log file.
	 */
	public TCPDumpReader(String fileName) {
		this.fileName = fileName;
		try {
			readFile();
		} catch(IOException ioe) {
			ioe.printStackTrace();
			System.exit(1);
		}
	}
	
	public int numRecords() {
		return tcpDumpData.size();
	}
	
	public Enumeration<TCPDumpRecord> elements() {
		return tcpDumpData.elements();
	}
	
	/**
	 * Sets the file logger for saving debug messages into a file.
	 * 
	 * @param flogger The file logger to use to save debug messages.
	 */
	public void setFileLogger(FileLogger flogger) {
		this.flogger = flogger;
	}

	/**
	 * Reads in and organizes the data in the tcpdump log file.
	 * 
	 * @throws NumberFormatException
	 * @throws IOException
	 */
	private void readFile() throws IOException {
		File file = new File(fileName);
		BufferedReader br = new BufferedReader(new FileReader(file));
		String line = null;
		
		int lineno = 0;
		while (( line = br.readLine()) != null){
			try {
				TCPDumpRecord record = new TCPDumpRecord(line);
				tcpDumpData.add(record);
			} catch(InvalidFormatException ife) {
				log("WARNING: Ignoring line " + lineno + " due to invalid format.", flogger);
				ife.printStackTrace();
			}
			lineno++;
		}
	}
	
	public String toString() {
		StringBuffer result = new StringBuffer();
		for (int i=0; i < tcpDumpData.size(); i++) {
			TCPDumpRecord rec = tcpDumpData.get(i);
			result.append(rec.toString() + "\n");
		}
		return result.toString();
	}
	
	private void log(String msg, FileLogger flogger) {
		System.out.println(msg);
		if (flogger != null)
			flogger.log(msg);
	}
	
	private static void print(String msg) {
		if (System.getProperty ("PharosMiddleware.debug") != null)
			System.out.println(msg);
	}
	
	private static void usage() {
		System.setProperty ("PharosMiddleware.debug", "true");
		print("Usage: pharoslabut.logger.analyzer.tcpdump.TCPDumpReader <options>\n");
		print("Where <options> include:");
		print("\t-file <name of file containing TCP Dump log in plain-text format>: (required)");
		print("\t-output <name of output file> (optional)");
		print("\t-debug: enable debug mode");
	}
	
	public static void main(String[] args) {
		String fileName = null;
		String outFile = null;
		
		// Process the command line arguments...
		try {
			for (int i=0; i < args.length; i++) {
				if (args[i].equals("-file"))
					fileName = args[++i];
				else if (args[i].equals("-output"))
					outFile = args[++i];
				else if (args[i].equals("-debug") || args[i].equals("-d"))
					System.setProperty ("PharosMiddleware.debug", "true");
				else {
					usage();
					System.exit(1);
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
			usage();
			System.exit(1);
		}
		
		if (fileName == null) {
			usage();
			System.exit(1);
		}
		
		TCPDumpReader reader = new TCPDumpReader(fileName);
		if (outFile != null) {
			FileLogger flogger = new FileLogger(outFile);
			flogger.log(reader.toString());
		}
		System.out.println(reader.toString());
	}
}
