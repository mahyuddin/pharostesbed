package pharoslabut.logger.analyzer.ssvd;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;

import pharoslabut.logger.FileLogger;
import pharoslabut.logger.analyzer.TelosBRxRecord;
import pharoslabut.logger.analyzer.TelosBSignalStrengthResult;

/**
 * Reads the output generated by pharoslabut.logger.analyzer.SignalStrengthVsDist. 
 * Generates a histogram of the number of receptions vs. distance.
 * 
 * @author Chien-Liang Fok
 * @see pharoslabut.logger.analyzer.SignalStrengthVsDist
 */
public class TelosBSSvDHistogramGenerator {
	
	/**
	 * The width of the window over which to compute the number of
	 * receptions.  For example, the height of the first bar will be
	 * for distances [0, HISTOGRAM_DISTANCE_WINDOW).
	 */
	public static final int HISTOGRAM_DISTANCE_WINDOW = 5;
	
	private FileLogger flogger = null;
	
	
	/**
	 * The constructor.
	 * 
	 * @param inputFile The directory containing the data from the experiment.
	 * @param flogger The file logger in which to save debug output. This may be null.
	 */
	public TelosBSSvDHistogramGenerator(FileLogger flogger) {
		this.flogger = flogger;
		
	}
	
	/**
	 * Generates the histogram of number of receptions vs. Time.
	 * 
	 * @param inputFileName
	 * @param outputFileName
	 */
	public void generateHistogram(String inputFileName, String outputFileName) {
		log("Input file: " + inputFileName);
		// First read the input file
		BufferedReader input = null;
		try {
			input =  new BufferedReader(new FileReader(inputFileName));
		} catch (IOException ex){
			ex.printStackTrace();
			System.err.println("Unable to open " + inputFileName);
			System.exit(1);
		}
		
//		Vector<String> comments = new Vector<String>();
		Vector<TelosBSignalStrengthResult> data = new Vector<TelosBSignalStrengthResult>();
		
		try {
			String line = null;
			int lineno = 1;
			while (( line = input.readLine()) != null) {
				//log("Line: " + line);
				if (!line.equals("")) { // ignore blank lines
//					if (line.startsWith("#")) {
//						comments.add(line);
////						log("Adding comment: " + line);
//					}
					if (!line.startsWith("#") && !line.contains("Timestamp")) { // ignore the header
						String[] elem = line.split("[\\s]+");
						long timestamp = Long.valueOf(elem[0]);
						int sndrID = Integer.valueOf(elem[1]);
						int rcvrID = Integer.valueOf(elem[2]);
						int seqno = Integer.valueOf(elem[3]);
						double dist = Double.valueOf(elem[4]);
						int lqi = Integer.valueOf(elem[5]);
						int rssi = Integer.valueOf(elem[6]);
						
						TelosBRxRecord rxRecord = new TelosBRxRecord(timestamp, rcvrID, sndrID, seqno, rssi, lqi) ;
						TelosBSignalStrengthResult result = new TelosBSignalStrengthResult(rxRecord, dist);
						data.add(result);
					}
				}
				lineno++;
			}
			input.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		if (data.size() == 0) {
			logErr("No data found!");
			System.exit(0);
		}
		
		double maxDist = TelosBSSvDAvgGenerator.findMaxDist(data);
		log("maxDist = " + maxDist);
		
		// Save the histogram in a file
		FileLogger outFlogger = new FileLogger(outputFileName + ".data", false);
		
		print("# Max dist = " + maxDist, outFlogger);
		print("# Histogram Window Size = " + HISTOGRAM_DISTANCE_WINDOW, outFlogger);

		Enumeration<TelosBSignalStrengthResult> e = data.elements();
		while (e.hasMoreElements()) {
			TelosBSignalStrengthResult currData = e.nextElement();
			print(Double.toString(currData.getDist()), outFlogger);
		}
		
		// Save the gnuplot script
		outFlogger = new FileLogger(outputFileName + ".gnuplot", false);
		outFlogger.log("clear");
		outFlogger.log("reset");
		outFlogger.log("set xtics 5");
		outFlogger.log("set title \"" + getExpName(inputFileName) + " Number of cc2420 Receptions vs Distance of All Nodes\"");
		outFlogger.log("set xlabel \"Distance (m)\"");
		outFlogger.log("set ylabel \"Number of Receptions\"");
		outFlogger.log("set style histogram clustered gap 1");
		outFlogger.log("set style fill solid border -1");
		outFlogger.log("set boxwidth 0.9");
		outFlogger.log("set xtic rotate by -45 scale 0");
		outFlogger.log("binwidth=5");
		outFlogger.log("set boxwidth binwidth");
		outFlogger.log("bin(x,width)=width*floor(x/width) + binwidth/2.0");
		outFlogger.log("plot \"" + outputFileName + ".data\" using (bin($1,binwidth)):(1.0) smooth freq with boxes lt rgb \"blue\" notitle");
		outFlogger.log("set terminal png");
		outFlogger.log("set output \"" + outputFileName + ".png\"");
		outFlogger.log("replot");
	}
	
	/**
	 * Extracts the experiment name from a log file name.  It assumes
	 * the the file name is of the form "Mxx-Expxx...");
	 * @param fileName
	 * @return
	 */
	public static final String getExpName(String fileName) {
		String result = null;
		String[] tokens = fileName.split("-");
		if (tokens.length >= 2) {
			if (tokens[0].matches("M\\d+") && tokens[1].matches("Exp\\d+"))
				result = tokens[0] + "-" + tokens[1];
		}
		if (result == null) {
			System.err.println("Unable to determine experiment name of " + fileName);
			System.exit(1);
		}
		return result;
	}

	private void logErr(String msg) {
		String result = "TelosSSvDHistogramGenerator: " + msg;
		if (System.getProperty ("PharosMiddleware.debug") != null) 
			System.err.println(result);
		if (flogger != null)
			flogger.log(result);
	}
	
	private void log(String msg) {
		TelosBSSvDHistogramGenerator.log(msg, this.flogger);
	}
	
	private static void log(String msg, FileLogger flogger) {
		String result = "TelosSSvDHistogramGenerator: " + msg;
		if (System.getProperty ("PharosMiddleware.debug") != null) 
			System.out.println(result);
		if (flogger != null)
			flogger.log(result);
	}
	
	private void print(String msg, FileLogger flogger) {
		if (System.getProperty ("PharosMiddleware.debug") != null)
			System.out.println(msg);
		if (flogger != null)
			flogger.log(msg);
	}
	
	private static void print(String msg) {
		if (System.getProperty ("PharosMiddleware.debug") != null)
			System.out.println(msg);
	}
	
	private static void usage() {
		System.setProperty ("PharosMiddleware.debug", "true");
		print("Usage: pharoslabut.logger.analyzer.ssvd.TelosBSSvDHistogramGenerator <options>\n");
		print("Where <options> include:");
		print("\t-input <input file>: The directory containing experiment data (required)");
		print("\t-output <output file>: The file in which the results are saved (required).");
		print("\t-log <log file name>: The file in which to log debug statements (default null)");
		print("\t-debug: enable debug mode");
	}
	
	public static void main(String[] args) {
		String inputFile = null;
		String outputFile = null;
		FileLogger flogger = null; // for saving debug output
		
		// Process the command line arguments...
		try {
			for (int i=0; i < args.length; i++) {
		
				if (args[i].equals("-log"))
					flogger = new FileLogger(args[++i], false);
				else if (args[i].equals("-input"))
					inputFile = args[++i];
				else if (args[i].equals("-debug") || args[i].equals("-d"))
					System.setProperty ("PharosMiddleware.debug", "true");
				else if (args[i].equals("-output"))
					outputFile = args[++i];
				else {
					usage();
					System.exit(1);
				}
			}
		} catch(Exception e) {
			e.printStackTrace();
			usage();
			System.exit(1);
		}
		
		if (inputFile == null || outputFile == null) {
			usage();
			System.exit(1);
		}
		
		
		TelosBSSvDHistogramGenerator averager = new TelosBSSvDHistogramGenerator(flogger);
		averager.generateHistogram(inputFile, outputFile);
	}
}
