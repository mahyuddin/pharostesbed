package pharoslabut.GUI;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import pharoslabut.exceptions.NoNewDataException;



/*
 * NewJFrame.java
 *
 * 
 */

/**
 *
 * @author Johanna Rivera Santos
 * Summer 2011
 */
public class RobotWindow extends javax.swing.JFrame {
SwingWorker worker;

 String IP;
 static String indoor;
 static Process process;
 static BufferedReader input;
 static String line;
 static int index;
 static String signal;
 String serverIP;
    /** Creates new form NewJFrame */
    public RobotWindow() {
     
        initComponents();
       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    public void setIP(String ba){
        IP = ba;
    }
    
    public void setServerIP(String be){
        this.serverIP = be;
    }
    
    public String getIP(){
        return IP;
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Latitude:");

        jLabel3.setText("Longitude:");

        jLabel4.setText("Altitude:");

        jLabel8.setText("Color:");

        jButton2.setText("Hide Window");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        jTextArea7.setColumns(20);
        jTextArea7.setRows(5);
        jScrollPane1.setViewportView(jTextArea7);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE))
                        .addGap(96, 96, 96)))
                .addGap(45, 45, 45))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(371, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(jLabel2))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, 0, 0, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jLabel8))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        worker = new SwingWorker() {
            @Override
            public Object construct() {
                
                return doWork();
            }
            
        };
        
        worker.start();
        
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        closeApplication();
}//GEN-LAST:event_jButton2ActionPerformed

    
  private void startRobot(){
      for(int i = 0; i < NewJFrame.robots.size(); i++){
                    if(NewJFrame.robots.getRobot(i) != null){
                        if (NewJFrame.robots.getRobot(i).getServerIP().equals(this.serverIP)) 
                            NewJFrame.robots.getRobot(i).run();
                      
                       
                    } 
                }
  }
  
  
  
     private void closeApplication(){
  hide();
}

     void showWindow(){
         show();
     }
    
   void connect(){
         try { 
        	
            process = Runtime.getRuntime().exec("tcpdump -I -s 256 -i en1"); 
            input = new BufferedReader(new InputStreamReader(process.getInputStream())); 

         } catch (IOException e1) { 
             System.exit(1); 
         } 
    }
    
    void getRSS(){
        
        try {
			 
             while((line=input.readLine())!=null) {

              index = line.indexOf(IP);
      
              if(index != -1){
              signal = line.substring(71, 77);
              //System.out.println(index);
              //System.out.println(line);
              //System.out.println(line.substring(77, 81));
               //System.out.println(signal +"  " + IP);
              updateSignal(signal + "    "+ serverIP);
              
              
              }
                try {
                    Thread.sleep(30);
                } catch (InterruptedException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
              
              }
          if(Thread.interrupted()){
                 updateSignal("Interrupted");
                
            }

      } catch (IOException e1) { 
          System.exit(0); 
      } 
    }
    
    void getLatitude() throws NoNewDataException{
      
        
            if(indoor.equalsIgnoreCase("yes")){
                updateLatitude("Indoor Location");
            }
            if(indoor.equalsIgnoreCase("no")){
                for(int i = 0; i < NewJFrame.robots.size(); i++){
                    if(NewJFrame.robots.getRobot(i).getServerIP().equals(serverIP)){
                        updateLatitude(Double.toString(NewJFrame.robots.getRobot(i).Latitude()));
                    }
                }
            
             }
        
        
        try {
            Thread.sleep(50);
        } catch (InterruptedException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(Thread.interrupted()){
                 updateLatitude("Interrupted");
                
         }
    }
    
    
    void getLongitude() throws NoNewDataException{
         if(indoor.equalsIgnoreCase("yes")){
                updateLongitude("Indoor Location");
            }
            if(indoor.equalsIgnoreCase("no")){
                for(int i = 0; i < NewJFrame.robots.size(); i++){
                    if(NewJFrame.robots.getRobot(i).getServerIP().equals(serverIP)){
                        updateLatitude(Double.toString(NewJFrame.robots.getRobot(i).Longitude()));
                    }
                }
            
             }
        try {
            Thread.sleep(50);
        } catch (InterruptedException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(Thread.interrupted()){
                 updateLatitude("Interrupted");
                
        }
    }
    
    
    void getAltitude() throws NoNewDataException{
         if(indoor.equalsIgnoreCase("yes")){
                updateAltitude("Indoor Location");
            }
            if(indoor.equalsIgnoreCase("no")){
                for(int i = 0; i < NewJFrame.robots.size(); i++){
                    if(NewJFrame.robots.getRobot(i).getServerIP().equals(serverIP)){
                        updateLatitude(Double.toString(NewJFrame.robots.getRobot(i).Altitude()));
                    }
                }
            
             }
        try {
            Thread.sleep(50);
        } catch (InterruptedException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(Thread.interrupted()){
                 updateLatitude("Interrupted");
                
        }
    }
    
      
   void updateSignal(final String str) {
       
        Runnable doSetLabel = new Runnable() {
            @Override
            public void run() {
              
                NewJFrame.jTextArea7.append(str+"\n");
                jTextArea7.append(str+"\n");
            }
        };
        SwingUtilities.invokeLater(doSetLabel);
    }
    
        
    
    void updateLatitude(final String str){
       
        Runnable doSetLabel = new Runnable(){
            @Override
            public void run(){
                jTextArea2.setText(str +"\n" );
            }
        };
        SwingUtilities.invokeLater(doSetLabel);
   }
    
    
    
    void updateLongitude(final String str){
       
        Runnable doSetLabel = new Runnable(){
            @Override
            public void run(){
                jTextArea3.setText(str + "\n");
            }
        };
        SwingUtilities.invokeLater(doSetLabel);
    }
    
    
    
    void updateAltitude(final String str){
      
        Runnable doSetLabel = new Runnable(){
            @Override
            public void run(){
                jTextArea4.setText(str + "\n");
            }
        };
        SwingUtilities.invokeLater(doSetLabel);
    }
    
    
    
    
    
   
     Object doWork() {
        
            connect();
            
            ExecutorService es = Executors.newFixedThreadPool(3);        
            List<Future> futures = new ArrayList<Future>();
           
            
             futures.add(es.submit(new Callable() {
            @Override
                    public Object call() throws Exception {
                        getLatitude();
                        return null;
                    }
                }));
              futures.add(es.submit(new Callable() {
            @Override
                    public Object call() throws Exception {
                        getLongitude();
                        return null;
                    }
                }));
              
               futures.add(es.submit(new Callable() {
            @Override
                    public Object call() throws Exception {
                        getAltitude();
                        return null;
                    }
                }));
            
              
              futures.add(es.submit(new Callable() {
            @Override
                    public Object call() throws Exception {
                        getRSS();
                        return null;
                    }
                }));
              futures.add(es.submit(new Callable() {
            @Override
                    public Object call() throws Exception {
                        startRobot();
                        return null;
                    }
                }));

              for (Future future:futures)
            try {
                future.get();  // blocking call, explicitly waiting for the response from a specific task, not necessarily the first task that is completed
            } catch (InterruptedException e) {
            } catch (ExecutionException e) {
            }

       
       
	return "Interrupted";  
        
       
    }
    
    
    

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new RobotWindow().setVisible(true);
            }
        });
    }


        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea7;
    // End of variables declaration//GEN-END:variables



}
